1. How do you find related data that is held in two separate data tables?
  you use a JOIN statement

2. Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN,
LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN. give a real world
example for each.
  cross join- cross join basically takes the join list from all columns from 1 and 2
    and returns back every possibility of combinations of outcomes so X * Y = result
  inner join- to me, this is the very basic join- you join this colum for table X with
    this column from table Y and it spits out X & Y rows
  left outer join- so left outer join is mostly reliant on table one info that doesn't
    meet join conditions; therefore a new row will result with null
  right outer join- this is literally the same as left outer join - but opposite. the
    info is reliant on table 2 in this case.
  full outer join- so this combines both of the previous joins and each null value from
    each table will be in the results along with the results that meet conditions

3. Define primary key and foreign key. Give a real world example for each.
  A primary key is a unique identifier that only exists once in the entire table.
  It allows you to select a single row of data. A primary key can be a foreign key
  in another table, which allows you to link the two tables.

  A good example of this would be my family.
    So, my family (biologically) - My mom, My dad, my sister, my brother, and myself.

    However, I'm married now, therefore my family is expanded to include - My father-in-law,
    mother-in-law, husband, and myself

    If I treat my family as the primary table and myself as the primary key, then I'm the
    foreign key on my husband's family table.

4. Define aliasing.
  Aliasing is a way of abbreviating. So, instead of writing an entire table name out,
  you can abbreviate it using the first letter.

5. Change this query so that you are using aliasing:
    SELECT professor.name, compensation.salary,
    compensation.vacation_days FROM professor

    JOIN compensation

    ON professor.id = compensation.professor_id;

    ________________

    change:

    SELECT p.name, c.salary, c.vacation_days
    FROM professor AS p
    JOIN compensation AS c
    ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real world example.
  NATURAL is a great if you want an output list consisting of the column names that appear
  in both input tables.

  This would be great if you wanted to have a list printed of customer info that purchased
  a certain item in order to make a call list to let them know about an upcoming promotion
  for a the same or similar items in retail.

7. Using this Employee schema and data, write queries to find the following information:

  -All employees with their shifts if they have any. Also include any unscheduled shifts.

    SELECT *
    FROM scheduled_shifts
    JOIN employees
    ON scheduled_shifts.employee_id = employee.id
    JOIN shifts
    ON scheduled_shifts.shift_id = shifts.id;

8. Using this Adoption schema and data, please write queries to retrieve the following
information and include the results:

  - All volunteers. If the volunteer is fostering a dog, include each dog as well.
      SELECT volunteers.first_name, volunteers.last_name, dogs.name
      FROM volunteers
      JOIN dogs
      ON  volunteers.foster_dog_id = dogs.id;

  - The cat's name, adopter's name, and adopted date for each cat adopted within the past
  month to be displayed as part of the "Happy Tail" social media promotion which posts
  recent successful adoptions.
      SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
      FROM cat_adoptions
      JOIN cats
      ON cat_adoptions.cat_id = cats.id
      JOIN adopters
      ON cat_adoptions.adopter_id = adopters.id;

  - Adopters who have not yet chosen a dog to adopt and generate all possible combinations
  of adopters and available dogs.
      SELECT *
      FROM adopters
      CROSS JOIN dogs
      WHERE in_foster = NULL;

  - Lists of all cats and all dogs who have not been adopted.
      SELECT *
      FROM cats
      JOIN dogs
      WHERE in_foster = NULL AND adoption_date = NULL;

  - Volunteers who are available to foster. If they currently are fostering a dog, include
  the dog. Also include all dogs who are not currently in foster homes.
      SELECT volunteers.first_name, volunteers.last_name
      FROM volunteers
      JOIN dogs
      ON volunteers.foster_dog_id = dogs.id;

  - The name of the person who adopted Rosco.
      SELECT adopters.first_name, adopters.last_name
      FROM dog_adoptions
      JOIN adopters
      ON dog_adoptions.adopter_id = adopters.id
      WHERE dog_id = 10007;

9. Using this Library schema and data, write queries applying the following scenarios:

  - To determine if the library should buy more copies of a given book, please provide
  the names and position, in order, of all the patrons with a hold (request for a book
  with all copies checked out) on "Advanced Potion-Making"
      SELECT holds.rank, patrons.name
      FROM holds
      JOIN patrons
      ON holds.patron_id = patrons.id
      WHERE isbn = 9136884926
      GROUP BY patrons.name
      ORDER BY holds.rank;

  - Make a list of all book titles and denote whether or not a copy of that book is checked
  out
      SELECT books.title
      FROM transactions
      JOIN books
      ON transactions.isbn = books.isbn
      ORDER BY checked_in_date;

  - In an effort to learn which books take longer to read, the librarians would like you to
  create a list of average checked out time by book name in the past month.
      SELECT AVG(checked_out_date)
      FROM transactions
      WHERE checked_out_date <= CURRENT_DATE - INTERVAL '30 DAYS';

  - In order to learn which items should be retired, make a list of all books that have not
  been checked out in the past 5 years.
      SELECT books.name
      FROM transactions
      JOIN books
      ON transactions.isbn = books.isbn
      WHERE checked_out_date >= CURRENT_DATE - INTERVAL '5 YEARS'
      ORDER BY checked_out_date DESC;

  - List all of the library patrons. If they have one or more books checked out,
  correspond the books to the patrons.
      SELECT patrons.name
      FROM transactions
      JOIN patrons
      ON transactions.patron_id = patrons.id
      JOIN books
      ON transactions.isbn = books.isbn
      GROUP BY patrons.name
      ORDER BY books.name;
